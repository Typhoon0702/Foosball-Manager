{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { auth } from 'firebase/app';\nlet AuthService = class AuthService {\n  constructor(afs,\n  // Inject Firestore service\n  afAuth,\n  // Inject Firebase auth service\n  router, ngZone,\n  // NgZone service to remove outside scope warning\n  snackBar, crud, messages) {\n    this.afs = afs;\n    this.afAuth = afAuth;\n    this.router = router;\n    this.ngZone = ngZone;\n    this.snackBar = snackBar;\n    this.crud = crud;\n    this.messages = messages;\n    /* Saving user data in localstorage when\n    logged in and setting up null when logged out */\n    this.afAuth.authState.subscribe(user => {\n      if (user) {\n        this.userData = user;\n        localStorage.setItem('user', JSON.stringify(this.userData));\n        JSON.parse(localStorage.getItem('user'));\n      } else {\n        localStorage.setItem('user', null);\n        JSON.parse(localStorage.getItem('user'));\n      }\n    });\n  }\n  // Firebase SignInWithPopup\n  OAuthProvider(provider) {\n    return this.afAuth.auth.signInWithPopup(provider).then(res => {\n      this.ngZone.run(() => {\n        this.router.navigate(['dashboard']);\n      });\n    }).catch(error => {\n      this.snackBar.show(\"âš  SignIn Error: \" + error);\n    });\n  }\n  // Firebase Google Sign-in\n  SigninWithGoogle() {\n    return this.OAuthProvider(new auth.GoogleAuthProvider()).then(res => {\n      this.snackBar.show('ðŸŽ‰ Successfully logged in!');\n    }).catch(error => {\n      this.snackBar.show(\"âš  SignIn Error: \" + error);\n    });\n  }\n  // Returns true when user is looged in and email is verified\n  get isLoggedIn() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    this.messages.requestPermission(user.uid);\n    this.messages.receiveMessage();\n    this.message = this.messages.currentMessage;\n    return user !== null && user.emailVerified !== false ? true : false;\n  }\n  // Sign out \n  SignOut() {\n    return this.afAuth.auth.signOut().then(() => {\n      localStorage.removeItem('user');\n      window.location.reload();\n      this.router.navigate(['/']);\n    });\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["Injectable","auth","AuthService","constructor","afs","afAuth","router","ngZone","snackBar","crud","messages","authState","subscribe","user","userData","localStorage","setItem","JSON","stringify","parse","getItem","OAuthProvider","provider","signInWithPopup","then","res","run","navigate","catch","error","show","SigninWithGoogle","GoogleAuthProvider","isLoggedIn","requestPermission","uid","receiveMessage","message","currentMessage","emailVerified","SignOut","signOut","removeItem","window","location","reload","__decorate","providedIn"],"sources":["D:\\Documents\\GitHub\\Foosball-Manager#\\src\\app\\auth-service.service.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\nimport { TournamentUser } from \"./services/user\";\r\nimport { auth } from 'firebase/app';\r\nimport { AngularFireAuth } from \"@angular/fire/auth\";\r\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';\r\nimport { Router } from \"@angular/router\";\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { CrudService } from './crud.service';\r\nimport { extraUserData } from './services/extraUserData';\r\nimport { PopupService } from './snackbar.service';\r\nimport { MessagingService } from './messaging.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AuthService {\r\n  userData: any; // Save logged in user data\r\n  extraData: extraUserData;\r\n  message : any;\r\n\r\n  constructor(\r\n    public afs: AngularFirestore,   // Inject Firestore service\r\n    public afAuth: AngularFireAuth, // Inject Firebase auth service\r\n    public router: Router,\r\n    public ngZone: NgZone, // NgZone service to remove outside scope warning\r\n    public snackBar: PopupService,\r\n    public crud: CrudService,\r\n    public messages: MessagingService\r\n  ) {\r\n    /* Saving user data in localstorage when \r\n    logged in and setting up null when logged out */\r\n    this.afAuth.authState.subscribe(user => {\r\n      if (user) {\r\n        this.userData = user;        \r\n        localStorage.setItem('user', JSON.stringify(this.userData));\r\n        JSON.parse(localStorage.getItem('user'));\r\n      } else {\r\n        localStorage.setItem('user', null);\r\n        JSON.parse(localStorage.getItem('user'));\r\n      }\r\n    })\r\n  }\r\n\r\n  // Firebase SignInWithPopup\r\n  OAuthProvider(provider) {\r\n    return this.afAuth.auth.signInWithPopup(provider)\r\n      .then((res) => {\r\n        this.ngZone.run(() => {\r\n          this.router.navigate(['dashboard']);\r\n        })\r\n      }).catch((error) => {\r\n        this.snackBar.show(\"âš  SignIn Error: \" + error);\r\n      })\r\n  }\r\n\r\n  // Firebase Google Sign-in\r\n  SigninWithGoogle() {\r\n    return this.OAuthProvider(new auth.GoogleAuthProvider())\r\n      .then(res => {\r\n        this.snackBar.show('ðŸŽ‰ Successfully logged in!')\r\n      }).catch(error => {\r\n        this.snackBar.show(\"âš  SignIn Error: \" + error)\r\n      });\r\n  }\r\n\r\n  // Returns true when user is looged in and email is verified\r\n  get isLoggedIn(): boolean {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    \r\n    this.messages.requestPermission(user.uid);\r\n    this.messages.receiveMessage();\r\n    this.message = this.messages.currentMessage;    \r\n\r\n    return (user !== null && user.emailVerified !== false) ? true : false;\r\n  }\r\n\r\n  // Sign out \r\n  SignOut() {\r\n    return this.afAuth.auth.signOut().then(() => {\r\n      localStorage.removeItem('user');\r\n      window.location.reload();\r\n      this.router.navigate(['/']);\r\n    })\r\n  }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}