{"ast":null,"code":"import { Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../crud.service\";\nimport * as i2 from \"../auth-service.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../snackbar.service\";\nexport class TournamentManagerComponent {\n  constructor(crud, auth, route, router, fb, _snackBar) {\n    this.crud = crud;\n    this.auth = auth;\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this._snackBar = _snackBar;\n    this.tournamentControl = new FormControl('', [Validators.required]);\n    this.tournamentForm = fb.group({\n      Name: ['', Validators.required],\n      Type: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.id = params.id;\n    });\n    this.crud.getTournamentDetail(this.id).subscribe(data => {\n      if (data.payload.exists) {\n        let f = {\n          id: data.payload.id,\n          name: data.payload.data()[\"name\"],\n          teams: data.payload.data()[\"teams\"],\n          matches: data.payload.data()[\"matches\"],\n          users: data.payload.data()[\"users\"],\n          type: data.payload.data()[\"type\"],\n          admin: data.payload.data()[\"admin\"],\n          brackets: data.payload.data()[\"brackets\"]\n        };\n        this.tournament = f;\n        this.name = this.tournament.name;\n        this.type = this.tournament.type;\n        var brackets = {\n          rounds: []\n        };\n        this.tournament.brackets = this.tournament.brackets == null ? brackets : this.tournament.brackets;\n      } else {\n        this.router.navigate(['/404']);\n      }\n    });\n  }\n  setValue(e) {\n    if (e.checked) {\n      this.randomize = true;\n    } else {\n      this.randomize = false;\n    }\n  }\n  closeTournament() {\n    //Remove tournament\n    let snack = this._snackBar.showWithAction(\"‚ö† Are you sure to close this tournament?\", \"‚úî\");\n    snack.onAction().subscribe(() => {\n      this.crud.removeTournament(this.tournament);\n    });\n  }\n  updateTournament() {\n    this.tournament.name = this.name;\n    this.tournament.type = this.type;\n    this.crud.addInfoToTournament(this.tournament).then(resp => {\n      this._snackBar.show('üèÜ Tournament update successfully.');\n    }).catch(error => {\n      this._snackBar.show('‚ö†Ô∏è Error: ' + error);\n    });\n    this.router.navigate(['tournament'], {\n      queryParams: {\n        id: this.tournament.id\n      }\n    });\n  }\n  static {\n    this.…µfac = function TournamentManagerComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TournamentManagerComponent)(i0.…µ…µdirectiveInject(i1.CrudService), i0.…µ…µdirectiveInject(i2.AuthService), i0.…µ…µdirectiveInject(i3.ActivatedRoute), i0.…µ…µdirectiveInject(i3.Router), i0.…µ…µdirectiveInject(i4.FormBuilder), i0.…µ…µdirectiveInject(i5.PopupService));\n    };\n  }\n  static {\n    this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n      type: TournamentManagerComponent,\n      selectors: [[\"app-tournament-manager\"]],\n      decls: 12,\n      vars: 2,\n      consts: [[1, \"container\"], [3, \"formGroup\"], [1, \"form-row\", \"justify-content-center\"], [1, \"form-group\", \"col-lg-6\", \"col-md-6\", \"col-sm-12\", \"col-xs-12\"], [\"for\", \"inputAddress\"], [\"type\", \"text\", \"id\", \"inputAddress\", \"formControlName\", \"Name\", \"mdbInputDirective\", \"\", \"placeholder\", \"Foosball Champions\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"btn\", \"btn-dark\", \"mr-2\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"ml-2\", 3, \"click\"]],\n      template: function TournamentManagerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.…µ…µelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4);\n          i0.…µ…µtext(5, \"*Tournament name:\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(6, \"input\", 5);\n          i0.…µ…µtwoWayListener(\"ngModelChange\", function TournamentManagerComponent_Template_input_ngModelChange_6_listener($event) {\n            i0.…µ…µtwoWayBindingSet(ctx.name, $event) || (ctx.name = $event);\n            return $event;\n          });\n          i0.…µ…µelementEnd()()();\n          i0.…µ…µelementStart(7, \"div\", 2)(8, \"a\", 6);\n          i0.…µ…µlistener(\"click\", function TournamentManagerComponent_Template_a_click_8_listener() {\n            return ctx.updateTournament();\n          });\n          i0.…µ…µtext(9, \" \\uD83D\\uDCBE Save \");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(10, \"a\", 7);\n          i0.…µ…µlistener(\"click\", function TournamentManagerComponent_Template_a_click_10_listener() {\n            return ctx.closeTournament();\n          });\n          i0.…µ…µtext(11, \" \\u274C Delete Tournament \");\n          i0.…µ…µelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.…µ…µadvance();\n          i0.…µ…µproperty(\"formGroup\", ctx.tournamentForm);\n          i0.…µ…µadvance(5);\n          i0.…µ…µtwoWayProperty(\"ngModel\", ctx.name);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["Validators","FormControl","TournamentManagerComponent","constructor","crud","auth","route","router","fb","_snackBar","tournamentControl","required","tournamentForm","group","Name","Type","ngOnInit","queryParams","subscribe","params","id","getTournamentDetail","data","payload","exists","f","name","teams","matches","users","type","admin","brackets","tournament","rounds","navigate","setValue","e","checked","randomize","closeTournament","snack","showWithAction","onAction","removeTournament","updateTournament","addInfoToTournament","then","resp","show","catch","error","i0","…µ…µdirectiveInject","i1","CrudService","i2","AuthService","i3","ActivatedRoute","Router","i4","FormBuilder","i5","PopupService","selectors","decls","vars","consts","template","TournamentManagerComponent_Template","rf","ctx","…µ…µelementStart","…µ…µtext","…µ…µelementEnd","…µ…µtwoWayListener","TournamentManagerComponent_Template_input_ngModelChange_6_listener","$event","…µ…µtwoWayBindingSet","…µ…µlistener","TournamentManagerComponent_Template_a_click_8_listener","TournamentManagerComponent_Template_a_click_10_listener","…µ…µadvance","…µ…µproperty","…µ…µtwoWayProperty"],"sources":["D:\\Documents\\GitHub\\Foosball-Manager#\\src\\app\\tournament-manager\\tournament-manager.component.ts","D:\\Documents\\GitHub\\Foosball-Manager#\\src\\app\\tournament-manager\\tournament-manager.component.html"],"sourcesContent":["import { Component, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { CrudService } from '../crud.service';\r\nimport { Tournament } from '../services/tournaments';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthService } from '../auth-service.service';\r\nimport { FormBuilder, Validators, FormControl, FormGroup } from '@angular/forms';\r\nimport { PopupService } from '../snackbar.service';\r\nimport { Bracket } from '../services/brackets';\r\n\r\n@Component({\r\n  selector: 'app-tournament-manager',\r\n  templateUrl: './tournament-manager.component.html',\r\n  styleUrls: ['./tournament-manager.component.scss']\r\n})\r\nexport class TournamentManagerComponent implements OnInit {\r\n\r\n  tournamentForm: FormGroup;\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  randomize: boolean;\r\n  tournament: Tournament;\r\n  tournamentControl = new FormControl('', [Validators.required]);\r\n\r\n  constructor(public crud: CrudService, public auth: AuthService, private route: ActivatedRoute, private router: Router, public fb: FormBuilder, private _snackBar: PopupService) {\r\n    this.tournamentForm = fb.group({\r\n      Name: ['', Validators.required],\r\n      Type: ['', Validators.required],\r\n    })\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.route.queryParams\r\n      .subscribe(params => {\r\n        this.id = params.id;\r\n      });\r\n\r\n    this.crud.getTournamentDetail(this.id).subscribe(data => {\r\n      if (data.payload.exists) {\r\n        let f: Tournament = {\r\n          id: data.payload.id,\r\n          name: data.payload.data()[\"name\"],\r\n          teams: data.payload.data()[\"teams\"],\r\n          matches: data.payload.data()[\"matches\"],\r\n          users: data.payload.data()[\"users\"],\r\n          type: data.payload.data()[\"type\"],\r\n          admin: data.payload.data()[\"admin\"],\r\n          brackets : data.payload.data()[\"brackets\"]\r\n        };\r\n        this.tournament = f;\r\n        this.name = this.tournament.name;\r\n        this.type = this.tournament.type;\r\n        var brackets : Bracket = {\r\n          rounds: []\r\n        }\r\n\r\n        this.tournament.brackets = this.tournament.brackets == null ?  brackets : this.tournament.brackets;\r\n      }\r\n      else {\r\n        this.router.navigate(['/404']);\r\n      }\r\n    });\r\n  }\r\n\r\n  setValue(e) {\r\n    if (e.checked) {\r\n      this.randomize = true;\r\n    }\r\n    else {\r\n      this.randomize = false;\r\n    }\r\n  }\r\n\r\n\r\n  closeTournament() {\r\n    //Remove tournament\r\n    let snack = this._snackBar.showWithAction(\"‚ö† Are you sure to close this tournament?\",\"‚úî\");\r\n    snack.onAction().subscribe(() =>{\r\n      this.crud.removeTournament(this.tournament);\r\n    });\r\n  }\r\n\r\n  updateTournament() {\r\n    this.tournament.name = this.name;\r\n    this.tournament.type = this.type;\r\n\r\n    this.crud.addInfoToTournament(this.tournament).then(resp => {\r\n\r\n      this._snackBar.show('üèÜ Tournament update successfully.');\r\n    }).catch(error => {\r\n      this._snackBar.show('‚ö†Ô∏è Error: ' + error);\r\n    });\r\n    this.router.navigate(['tournament'], {queryParams: {id: this.tournament.id}});\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <form [formGroup]=\"tournamentForm\">\r\n        <div class=\"form-row justify-content-center\">\r\n            <div class=\"form-group col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                <label for=\"inputAddress\">*Tournament name:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"inputAddress\" formControlName=\"Name\" mdbInputDirective\r\n                    placeholder=\"Foosball Champions\" [(ngModel)]=\"name\">\r\n            </div>\r\n        </div>\r\n        \r\n        <div class=\"form-row justify-content-center\">\r\n            <a (click)=\"updateTournament()\" class=\"btn btn-dark mr-2\">\r\n                üíæ Save\r\n            </a>\r\n            <a class=\"btn btn-danger ml-2\" (click)=\"closeTournament()\">\r\n                ‚ùå Delete Tournament\r\n            </a>\r\n        </div>\r\n    </form>\r\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}