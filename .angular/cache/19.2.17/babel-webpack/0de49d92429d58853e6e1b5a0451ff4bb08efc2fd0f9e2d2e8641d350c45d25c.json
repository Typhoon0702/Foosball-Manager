{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth-service.service\";\nimport * as i2 from \"../crud.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../snackbar.service\";\nconst _c0 = () => [\"fas\", \"cogs\"];\nconst _c1 = () => [\"fas\", \"plus-circle\"];\nfunction TournamentdetailComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"loading\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TournamentdetailComponent_div_2_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function TournamentdetailComponent_div_2_div_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.manageTournament());\n    });\n    i0.ɵɵelement(2, \"fa-icon\", 11);\n    i0.ɵɵtext(3, \" Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function TournamentdetailComponent_div_2_div_5_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.addNewMatch(ctx_r1.id));\n    });\n    i0.ɵɵelement(5, \"fa-icon\", 11);\n    i0.ɵɵtext(6, \" Match \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"icon\", i0.ɵɵpureFunction0(2, _c0));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"icon\", i0.ɵɵpureFunction0(3, _c1));\n  }\n}\nfunction TournamentdetailComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"i\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TournamentdetailComponent_div_2_div_5_Template, 7, 4, \"div\", 1);\n    i0.ɵɵelement(6, \"div\", 4);\n    i0.ɵɵelementStart(7, \"div\", 5)(8, \"div\", 6);\n    i0.ɵɵelement(9, \"teamlist\", 7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(10, \"div\", 4);\n    i0.ɵɵelementStart(11, \"div\", 5)(12, \"div\", 6);\n    i0.ɵɵelement(13, \"match-calendar\", 8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(14, \"div\", 4);\n    i0.ɵɵelementStart(15, \"div\", 5)(16, \"div\", 6);\n    i0.ɵɵelement(17, \"matchlist\", 9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(18, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\uD83C\\uDFC6 \", ctx_r1.tournament.name, \" \\uD83C\\uDFC6\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Admin: \", ctx_r1.getAdmins(ctx_r1.tournament.admin), \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isAdmin == true);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"teams\", ctx_r1.tournament.teams)(\"tournamentId\", ctx_r1.tournament.id);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"calendar\", ctx_r1.matchesToPlay)(\"tournamentId\", ctx_r1.tournament.id);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matches\", ctx_r1.matches)(\"tournamentId\", ctx_r1.tournament.id);\n  }\n}\nexport let TournamentdetailComponent = /*#__PURE__*/(() => {\n  class TournamentdetailComponent {\n    constructor(auth, crud, route, router, fb, _snackBar) {\n      this.auth = auth;\n      this.crud = crud;\n      this.route = route;\n      this.router = router;\n      this.fb = fb;\n      this._snackBar = _snackBar;\n      this.roleForm = this.fb.group({\n        PlayerRole: ['', Validators.required]\n      });\n    }\n    ngOnInit() {\n      this.route.queryParams.subscribe(params => {\n        this.id = params.id;\n      });\n      this.crud.getTournamentDetail(this.id).subscribe(data => {\n        if (data.payload.exists) {\n          let f = {\n            id: data.payload.id,\n            name: data.payload.data()[\"name\"],\n            teams: data.payload.data()[\"teams\"],\n            matches: data.payload.data()[\"matches\"],\n            users: data.payload.data()[\"users\"],\n            type: data.payload.data()[\"type\"],\n            admin: data.payload.data()[\"admin\"],\n            brackets: data.payload.data()[\"brackets\"]\n          };\n          this.tournament = f;\n          this.matches = this.tournament.matches.filter(m => m.finished);\n          this.matchesToPlay = this.tournament.matches.filter(m => m.finished == false);\n          this.matches.forEach(element => {\n            element.blueTeam = this.tournament.teams.find(t => t.id == element.blueTeamId);\n            element.redTeam = this.tournament.teams.find(t => t.id == element.redTeamId);\n          });\n          if (this.tournament.brackets == null) {\n            var rounds = [];\n            this.brackets = {\n              rounds: rounds\n            };\n          } else this.brackets = this.tournament.brackets;\n        } else {\n          this.router.navigate(['/404']);\n        }\n      });\n    }\n    createNewTeam(tournamentId) {\n      this.router.navigate(['/teammaker'], {\n        queryParams: {\n          id: tournamentId\n        }\n      });\n    }\n    createNewMatch(tournamentId) {\n      this.router.navigate(['/matchmaker'], {\n        queryParams: {\n          id: tournamentId,\n          add: \"false\"\n        }\n      });\n    }\n    addNewMatch(tournamentId) {\n      this.router.navigate(['/matchmaker'], {\n        queryParams: {\n          id: tournamentId,\n          add: \"true\"\n        }\n      });\n    }\n    subscribe() {\n      let newUser = {\n        uid: this.auth.userData.uid,\n        name: this.auth.userData.displayName,\n        role: this.playerRole\n      };\n      this.tournament.users.push(newUser);\n      this.crud.addInfoToTournament(this.tournament).then(resp => {\n        this._snackBar.show('👤 Subscribed successfully.');\n      }).catch(error => {\n        this._snackBar.show('⚠️ Error: ' + error);\n      });\n      this.router.navigate(['/tournament'], {\n        queryParams: {\n          id: this.id\n        }\n      });\n    }\n    Unsubscibe() {\n      let index = this.tournament.users.findIndex(user => user.uid == this.auth.userData.uid);\n      this.tournament.users.splice(index, 1);\n      this.crud.addInfoToTournament(this.tournament).then(resp => {\n        this._snackBar.show('👤 Unsubscribed successfully.');\n      }).catch(error => {\n        this._snackBar.show('⚠️ Error: ' + error);\n      });\n      this.router.navigate(['/tournament'], {\n        queryParams: {\n          id: this.id\n        }\n      });\n    }\n    get isSigned() {\n      let signed = false;\n      if (this.tournament != null) {\n        this.tournament.users.forEach(element => {\n          if (element.uid == this.auth.userData.uid) signed = true;\n        });\n      }\n      return signed;\n    }\n    get isAdmin() {\n      var iA = false;\n      if (this.tournament != null) this.tournament.admin.forEach(id => {\n        if (id == this.auth.userData.uid) {\n          iA = true;\n        }\n      });\n      return iA;\n    }\n    getAdmins(adminsIds) {\n      var admins = [];\n      adminsIds.forEach(id => {\n        admins.push(this.getUserName(id));\n      });\n      return admins;\n    }\n    inThisTeam(t) {\n      return t.strikerId == this.auth.userData.uid || t.defenderId == this.auth.userData.uid;\n    }\n    editTeam(team) {\n      this.router.navigate(['/teammanager'], {\n        queryParams: {\n          tournament: this.tournament.id,\n          team: team.id\n        }\n      });\n    }\n    showMatch(matchid) {\n      this.router.navigate(['/matchmanager'], {\n        queryParams: {\n          tournament: this.tournament.id,\n          match: matchid\n        }\n      });\n    }\n    manageTournament() {\n      this.router.navigate(['/tournament-manager'], {\n        queryParams: {\n          id: this.tournament.id\n        }\n      });\n    }\n    createBrackets() {\n      var emptyMatch = {\n        id: \"\",\n        date: formatDate(new Date(), \"dd MMM yyyy\", 'en'),\n        blueScore: 0,\n        redScore: 0,\n        blueTeamId: \"\",\n        redTeamId: \"\",\n        finished: true\n      };\n      var matchesNumber = 0;\n      if (this.tournament.teams.length % 2 == 0) matchesNumber = this.tournament.teams.length / 2;else {\n        this._snackBar.show(\"Unable to make brackets\");\n        return;\n      }\n      var teams = Object.assign([], this.tournament.teams);\n      var roundsNumber = this.SmallestDivisor(matchesNumber);\n      for (let i = 0; i <= roundsNumber; i++) {\n        var round = {\n          matches: []\n        };\n        if (i == 0) {\n          for (let index = 0; index < matchesNumber; index++) {\n            var t1 = this.random(teams.length);\n            var t2 = this.random(teams.length, t1);\n            var newMatch = {\n              blueTeamId: teams[t1].id,\n              redTeamId: teams[t2].id,\n              blueScore: 0,\n              redScore: 0,\n              finished: true,\n              date: formatDate(new Date(), \"dd MMM yyyy\", 'en'),\n              id: teams[t2].id + teams[t1].id + formatDate(new Date(), \"ddMMyyyyHHmmss\", 'en')\n            };\n            round.matches.push(newMatch);\n            teams.splice(t1, 1);\n            teams.splice(t2, 1);\n          }\n        } else {\n          for (let index = 0; index < matchesNumber; index++) {\n            round.matches.push(emptyMatch);\n          }\n        }\n        this.brackets.rounds.push(round);\n        matchesNumber /= 2;\n      }\n      this.tournament.brackets = this.brackets;\n      this.crud.addInfoToTournament(this.tournament);\n    }\n    createTeams() {\n      var defenders = this.tournament.users.filter(u => u.role == \"Defender\");\n      var strikers = this.tournament.users.filter(u => u.role == \"Striker\");\n      var anys = this.tournament.users.filter(u => u.role == \"Any\");\n      if (defenders.length > 0 && strikers.length > 0) {\n        if (defenders.length != strikers.length) {\n          if (anys.length > 0) {\n            if (defenders.length > strikers.length) {\n              for (let i = 0; i < defenders.length - strikers.length; i++) {\n                if (anys.length > 0) {\n                  anys[0].role = \"Striker\";\n                  strikers.push(anys[0]);\n                  anys.splice(0, 1);\n                }\n              }\n            } else if (defenders.length < strikers.length) {\n              for (let i = 0; i < strikers.length - defenders.length; i++) {\n                if (anys.length > 0) {\n                  anys[0].role = \"Defender\";\n                  defenders.push(anys[0]);\n                  anys.splice(0, 1);\n                }\n              }\n            }\n          } else this._snackBar.show(\"If defenders and strikers number is not the same you need some 'Any' players to fill missing positions\");\n        }\n        if (defenders.length == strikers.length) {\n          console.log(\"Generating...\");\n          var count = 0;\n          this.tournament.teams = [];\n          do {\n            count++;\n            var dIndex = this.random(defenders.length);\n            var sIndex = this.random(strikers.length);\n            var defenderId = defenders[dIndex].uid;\n            var strikerId = strikers[sIndex].uid;\n            var team = {\n              defenderId: defenderId,\n              strikerId: strikerId,\n              goalFatti: 0,\n              goalSubiti: 0,\n              lost: 0,\n              played: 0,\n              name: \"Team\" + count,\n              score: 0,\n              win: 0,\n              id: \"Team\" + count\n            };\n            defenders.splice(dIndex, 1);\n            strikers.splice(sIndex, 1);\n            this.tournament.teams.push(team);\n            console.log(team);\n          } while (defenders.length > 0);\n          console.log(this.tournament);\n          this.crud.addInfoToTournament(this.tournament);\n        }\n      }\n    }\n    getUserName(id) {\n      var player = this.tournament.users.find(u => u.uid == id);\n      if (player != null) return player.name;else return \"N/A\";\n    }\n    getTeamName(id) {\n      var team = this.tournament.teams.find(t => t.id == id);\n      if (team != null) return team.name;else return \"N/A\";\n    }\n    SmallestDivisor(n) {\n      for (let index = 1; index <= n; index++) {\n        if (n % index == 0) return index;\n      }\n    }\n    random(max, d) {\n      if (d != null) {\n        var x = 0;\n        do {\n          x = Math.floor(Math.random() * max);\n        } while (x == d);\n        return x;\n      } else return Math.floor(Math.random() * max);\n    }\n    static {\n      this.ɵfac = function TournamentdetailComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || TournamentdetailComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.CrudService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.PopupService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TournamentdetailComponent,\n        selectors: [[\"app-tournamentdetail\"]],\n        decls: 3,\n        vars: 2,\n        consts: [[1, \"container\"], [4, \"ngIf\"], [\"class\", \"text-center\", 4, \"ngIf\"], [1, \"text-center\"], [1, \"dropdown-divider\"], [1, \"row\"], [1, \"col-lg-12\", \"col-md-12\", \"justify-content-center\"], [3, \"teams\", \"tournamentId\"], [3, \"calendar\", \"tournamentId\"], [3, \"matches\", \"tournamentId\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", 3, \"click\"], [3, \"icon\"]],\n        template: function TournamentdetailComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, TournamentdetailComponent_div_1_Template, 2, 0, \"div\", 1)(2, TournamentdetailComponent_div_2_Template, 19, 9, \"div\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.tournament == null);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.tournament != null);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return TournamentdetailComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}