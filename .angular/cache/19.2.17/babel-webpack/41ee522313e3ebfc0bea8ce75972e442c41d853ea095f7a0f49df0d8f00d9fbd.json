{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { auth } from 'firebase/app';\nlet AuthService = class AuthService {\n  constructor(afs,\n  // Inject Firestore service\n  afAuth,\n  // Inject Firebase auth service\n  router, ngZone,\n  // NgZone service to remove outside scope warning\n  snackBar, crud, messages) {\n    this.afs = afs;\n    this.afAuth = afAuth;\n    this.router = router;\n    this.ngZone = ngZone;\n    this.snackBar = snackBar;\n    this.crud = crud;\n    this.messages = messages;\n    /* Saving user data in localstorage when\n    logged in and setting up null when logged out */\n    this.afAuth.authState.subscribe(user => {\n      if (user) {\n        this.userData = user;\n        localStorage.setItem('user', JSON.stringify(this.userData));\n        JSON.parse(localStorage.getItem('user'));\n      } else {\n        localStorage.setItem('user', null);\n        JSON.parse(localStorage.getItem('user'));\n      }\n    });\n  }\n  // Firebase SignInWithPopup\n  OAuthProvider(provider) {\n    return this.afAuth.auth.signInWithPopup(provider).then(res => {\n      this.ngZone.run(() => {\n        this.router.navigate(['dashboard']);\n      });\n    }).catch(error => {\n      this.snackBar.show(\"âš  SignIn Error: \" + error);\n    });\n  }\n  // Firebase Google Sign-in\n  SigninWithGoogle() {\n    return this.OAuthProvider(new auth.GoogleAuthProvider()).then(res => {\n      this.snackBar.show('ðŸŽ‰ Successfully logged in!');\n    }).catch(error => {\n      this.snackBar.show(\"âš  SignIn Error: \" + error);\n    });\n  }\n  // Returns true when user is looged in and email is verified\n  get isLoggedIn() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    this.messages.requestPermission(user.uid);\n    this.messages.receiveMessage();\n    this.message = this.messages.currentMessage;\n    return user !== null && user.emailVerified !== false ? true : false;\n  }\n  // Sign out \n  SignOut() {\n    return this.afAuth.auth.signOut().then(() => {\n      localStorage.removeItem('user');\n      window.location.reload();\n      this.router.navigate(['/']);\n    });\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}