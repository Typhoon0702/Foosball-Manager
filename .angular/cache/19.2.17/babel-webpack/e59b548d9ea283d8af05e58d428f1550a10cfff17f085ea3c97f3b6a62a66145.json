{"ast":null,"code":"import { Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../crud.service\";\nimport * as i2 from \"../auth-service.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../snackbar.service\";\nexport let TournamentManagerComponent = /*#__PURE__*/(() => {\n  class TournamentManagerComponent {\n    constructor(crud, auth, route, router, fb, _snackBar) {\n      this.crud = crud;\n      this.auth = auth;\n      this.route = route;\n      this.router = router;\n      this.fb = fb;\n      this._snackBar = _snackBar;\n      this.tournamentControl = new FormControl('', [Validators.required]);\n      this.tournamentForm = fb.group({\n        Name: ['', Validators.required],\n        Type: ['', Validators.required]\n      });\n    }\n    ngOnInit() {\n      this.route.queryParams.subscribe(params => {\n        this.id = params.id;\n      });\n      this.crud.getTournamentDetail(this.id).subscribe(data => {\n        if (data.payload.exists) {\n          let f = {\n            id: data.payload.id,\n            name: data.payload.data()[\"name\"],\n            teams: data.payload.data()[\"teams\"],\n            matches: data.payload.data()[\"matches\"],\n            users: data.payload.data()[\"users\"],\n            type: data.payload.data()[\"type\"],\n            admin: data.payload.data()[\"admin\"],\n            brackets: data.payload.data()[\"brackets\"]\n          };\n          this.tournament = f;\n          this.name = this.tournament.name;\n          this.type = this.tournament.type;\n          var brackets = {\n            rounds: []\n          };\n          this.tournament.brackets = this.tournament.brackets == null ? brackets : this.tournament.brackets;\n        } else {\n          this.router.navigate(['/404']);\n        }\n      });\n    }\n    setValue(e) {\n      if (e.checked) {\n        this.randomize = true;\n      } else {\n        this.randomize = false;\n      }\n    }\n    closeTournament() {\n      //Remove tournament\n      let snack = this._snackBar.showWithAction(\"‚ö† Are you sure to close this tournament?\", \"‚úî\");\n      snack.onAction().subscribe(() => {\n        this.crud.removeTournament(this.tournament);\n      });\n    }\n    updateTournament() {\n      this.tournament.name = this.name;\n      this.tournament.type = this.type;\n      this.crud.addInfoToTournament(this.tournament).then(resp => {\n        this._snackBar.show('üèÜ Tournament update successfully.');\n      }).catch(error => {\n        this._snackBar.show('‚ö†Ô∏è Error: ' + error);\n      });\n      this.router.navigate(['tournament'], {\n        queryParams: {\n          id: this.tournament.id\n        }\n      });\n    }\n    static {\n      this.…µfac = function TournamentManagerComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || TournamentManagerComponent)(i0.…µ…µdirectiveInject(i1.CrudService), i0.…µ…µdirectiveInject(i2.AuthService), i0.…µ…µdirectiveInject(i3.ActivatedRoute), i0.…µ…µdirectiveInject(i3.Router), i0.…µ…µdirectiveInject(i4.FormBuilder), i0.…µ…µdirectiveInject(i5.PopupService));\n      };\n    }\n    static {\n      this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n        type: TournamentManagerComponent,\n        selectors: [[\"app-tournament-manager\"]],\n        decls: 12,\n        vars: 2,\n        consts: [[1, \"container\"], [3, \"formGroup\"], [1, \"form-row\", \"justify-content-center\"], [1, \"form-group\", \"col-lg-6\", \"col-md-6\", \"col-sm-12\", \"col-xs-12\"], [\"for\", \"inputAddress\"], [\"type\", \"text\", \"id\", \"inputAddress\", \"formControlName\", \"Name\", \"mdbInputDirective\", \"\", \"placeholder\", \"Foosball Champions\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"btn\", \"btn-dark\", \"mr-2\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"ml-2\", 3, \"click\"]],\n        template: function TournamentManagerComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.…µ…µelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4);\n            i0.…µ…µtext(5, \"*Tournament name:\");\n            i0.…µ…µelementEnd();\n            i0.…µ…µelementStart(6, \"input\", 5);\n            i0.…µ…µtwoWayListener(\"ngModelChange\", function TournamentManagerComponent_Template_input_ngModelChange_6_listener($event) {\n              i0.…µ…µtwoWayBindingSet(ctx.name, $event) || (ctx.name = $event);\n              return $event;\n            });\n            i0.…µ…µelementEnd()()();\n            i0.…µ…µelementStart(7, \"div\", 2)(8, \"a\", 6);\n            i0.…µ…µlistener(\"click\", function TournamentManagerComponent_Template_a_click_8_listener() {\n              return ctx.updateTournament();\n            });\n            i0.…µ…µtext(9, \" \\uD83D\\uDCBE Save \");\n            i0.…µ…µelementEnd();\n            i0.…µ…µelementStart(10, \"a\", 7);\n            i0.…µ…µlistener(\"click\", function TournamentManagerComponent_Template_a_click_10_listener() {\n              return ctx.closeTournament();\n            });\n            i0.…µ…µtext(11, \" \\u274C Delete Tournament \");\n            i0.…µ…µelementEnd()()()();\n          }\n          if (rf & 2) {\n            i0.…µ…µadvance();\n            i0.…µ…µproperty(\"formGroup\", ctx.tournamentForm);\n            i0.…µ…µadvance(5);\n            i0.…µ…µtwoWayProperty(\"ngModel\", ctx.name);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return TournamentManagerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}