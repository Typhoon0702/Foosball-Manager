{"ast":null,"code":"import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, PLATFORM_ID, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, isSupported as isSupported$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\nclass Messaging {\n  constructor(messaging) {\n    return messaging;\n  }\n}\nconst MESSAGING_PROVIDER_NAME = 'messaging';\nclass MessagingInstances {\n  constructor() {\n    return _getAllInstancesOf(MESSAGING_PROVIDER_NAME);\n  }\n}\nconst messagingInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe(/*#__PURE__*/concatMap(() => from(_getAllInstancesOf(MESSAGING_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_MESSAGING_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.messaging-instances');\nfunction defaultMessagingInstanceFactory(provided, defaultApp, platformId) {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n  const defaultMessaging = _getDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n  return defaultMessaging && new Messaging(defaultMessaging);\n}\nfunction messagingInstanceFactory(fn) {\n  return (zone, injector, platformId) => {\n    if (isPlatformServer(platformId)) {\n      return null;\n    }\n    const messaging = zone.runOutsideAngular(() => fn(injector));\n    return new Messaging(messaging);\n  };\n}\nconst MESSAGING_INSTANCES_PROVIDER = {\n  provide: MessagingInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_MESSAGING_INSTANCES]]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n  provide: Messaging,\n  useFactory: defaultMessagingInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_MESSAGING_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\nlet MessagingModule = /*#__PURE__*/(() => {\n  class MessagingModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'fcm');\n    }\n    static ɵfac = function MessagingModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MessagingModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MessagingModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER]\n    });\n  }\n  return MessagingModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideMessaging(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'fcm');\n  return makeEnvironmentProviders([DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n    provide: PROVIDED_MESSAGING_INSTANCES,\n    useFactory: messagingInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, PLATFORM_ID, _AngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteToken = /*#__PURE__*/_zoneWrap(deleteToken$1, true, 2);\nconst getMessaging = /*#__PURE__*/_zoneWrap(getMessaging$1, true);\nconst getToken = /*#__PURE__*/_zoneWrap(getToken$1, true);\nconst isSupported = /*#__PURE__*/_zoneWrap(isSupported$1, false);\nconst onMessage = /*#__PURE__*/_zoneWrap(onMessage$1, false);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging };\n//# sourceMappingURL=angular-fire-messaging.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}