{"ast":null,"code":"import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, PLATFORM_ID, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, isSupported as isSupported$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\nclass Messaging {\n  constructor(messaging) {\n    return messaging;\n  }\n}\nconst MESSAGING_PROVIDER_NAME = 'messaging';\nclass MessagingInstances {\n  constructor() {\n    return _getAllInstancesOf(MESSAGING_PROVIDER_NAME);\n  }\n}\nconst messagingInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(MESSAGING_PROVIDER_NAME))), distinct());\nconst PROVIDED_MESSAGING_INSTANCES = new InjectionToken('angularfire2.messaging-instances');\nfunction defaultMessagingInstanceFactory(provided, defaultApp, platformId) {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n  const defaultMessaging = _getDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n  return defaultMessaging && new Messaging(defaultMessaging);\n}\nfunction messagingInstanceFactory(fn) {\n  return (zone, injector, platformId) => {\n    if (isPlatformServer(platformId)) {\n      return null;\n    }\n    const messaging = zone.runOutsideAngular(() => fn(injector));\n    return new Messaging(messaging);\n  };\n}\nconst MESSAGING_INSTANCES_PROVIDER = {\n  provide: MessagingInstances,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES]]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n  provide: Messaging,\n  useFactory: defaultMessagingInstanceFactory,\n  deps: [[new Optional(), PROVIDED_MESSAGING_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\nclass MessagingModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fcm');\n  }\n  static ɵfac = function MessagingModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MessagingModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MessagingModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MessagingModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideMessaging(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'fcm');\n  return makeEnvironmentProviders([DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n    provide: PROVIDED_MESSAGING_INSTANCES,\n    useFactory: messagingInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, PLATFORM_ID, _AngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteToken = _zoneWrap(deleteToken$1, true, 2);\nconst getMessaging = _zoneWrap(getMessaging$1, true);\nconst getToken = _zoneWrap(getToken$1, true);\nconst isSupported = _zoneWrap(isSupported$1, false);\nconst onMessage = _zoneWrap(onMessage$1, false);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging };","map":{"version":3,"names":["ɵgetAllInstancesOf","_getAllInstancesOf","ɵgetDefaultInstanceOf","_getDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","_AngularFireSchedulers","ɵzoneWrap","_zoneWrap","timer","from","concatMap","distinct","isPlatformServer","i0","InjectionToken","Optional","PLATFORM_ID","NgModule","makeEnvironmentProviders","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","deleteToken","deleteToken$1","getMessaging","getMessaging$1","getToken","getToken$1","isSupported","isSupported$1","onMessage","onMessage$1","Messaging","constructor","messaging","MESSAGING_PROVIDER_NAME","MessagingInstances","messagingInstance$","pipe","PROVIDED_MESSAGING_INSTANCES","defaultMessagingInstanceFactory","provided","defaultApp","platformId","defaultMessaging","messagingInstanceFactory","fn","zone","injector","runOutsideAngular","MESSAGING_INSTANCES_PROVIDER","provide","deps","DEFAULT_MESSAGING_INSTANCE_PROVIDER","useFactory","MessagingModule","full","ɵfac","MessagingModule_Factory","__ngFactoryType__","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","providers","ngDevMode","ɵsetClassMetadata","args","provideMessaging","multi"],"sources":["D:/Documents/GitHub/Foosball-Manager#/node_modules/@angular/fire/fesm2022/angular-fire-messaging.mjs"],"sourcesContent":["import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, PLATFORM_ID, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, isSupported as isSupported$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\n\nclass Messaging {\n    constructor(messaging) {\n        return messaging;\n    }\n}\nconst MESSAGING_PROVIDER_NAME = 'messaging';\nclass MessagingInstances {\n    constructor() {\n        return _getAllInstancesOf(MESSAGING_PROVIDER_NAME);\n    }\n}\nconst messagingInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(MESSAGING_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_MESSAGING_INSTANCES = new InjectionToken('angularfire2.messaging-instances');\nfunction defaultMessagingInstanceFactory(provided, defaultApp, platformId) {\n    if (isPlatformServer(platformId)) {\n        return null;\n    }\n    const defaultMessaging = _getDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n    return defaultMessaging && new Messaging(defaultMessaging);\n}\nfunction messagingInstanceFactory(fn) {\n    return (zone, injector, platformId) => {\n        if (isPlatformServer(platformId)) {\n            return null;\n        }\n        const messaging = zone.runOutsideAngular(() => fn(injector));\n        return new Messaging(messaging);\n    };\n}\nconst MESSAGING_INSTANCES_PROVIDER = {\n    provide: MessagingInstances,\n    deps: [\n        [new Optional(), PROVIDED_MESSAGING_INSTANCES],\n    ]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n    provide: Messaging,\n    useFactory: defaultMessagingInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_MESSAGING_INSTANCES],\n        FirebaseApp,\n        PLATFORM_ID,\n    ]\n};\nclass MessagingModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'fcm');\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MessagingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MessagingModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MessagingModule, providers: [\n            DEFAULT_MESSAGING_INSTANCE_PROVIDER,\n            MESSAGING_INSTANCES_PROVIDER,\n        ] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MessagingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_MESSAGING_INSTANCE_PROVIDER,\n                        MESSAGING_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: () => [] });\nfunction provideMessaging(fn, ...deps) {\n    registerVersion('angularfire', VERSION.full, 'fcm');\n    return makeEnvironmentProviders([\n        DEFAULT_MESSAGING_INSTANCE_PROVIDER,\n        MESSAGING_INSTANCES_PROVIDER,\n        {\n            provide: PROVIDED_MESSAGING_INSTANCES,\n            useFactory: messagingInstanceFactory(fn),\n            multi: true,\n            deps: [\n                NgZone,\n                Injector,\n                PLATFORM_ID,\n                _AngularFireSchedulers,\n                FirebaseApps,\n                ...deps,\n            ],\n        }\n    ]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteToken = _zoneWrap(deleteToken$1, true, 2);\nconst getMessaging = _zoneWrap(getMessaging$1, true);\nconst getToken = _zoneWrap(getToken$1, true);\nconst isSupported = _zoneWrap(isSupported$1, false);\nconst onMessage = _zoneWrap(onMessage$1, false);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}